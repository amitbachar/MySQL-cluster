---
# tasks file for MySQL-cluster
  - name: create an internal Docker network
    #shell : docker network create "{{ docker_network_name }}" --subnet=192.168.0.0/16
    docker_network:
      name: "{{ docker_network_name }}"
      #driver_options:
      #  com.docker.network.bridge.name: net2
      ipam_options:
        subnet: '192.168.0.0/16'
        #gateway: 172.3.26.1
        iprange: '192.168.0.0/24'
    register: output
  - debug: var=output.stdout_lines

  - name: start the management node
    #shell : docker run -d --net="{{ docker_network_name }}" --name=management1 --ip=192.168.0.2 mysql/mysql-cluster ndb_mgmd
    docker_container:
      name: management1
      image: mysql/mysql-cluster
      command: ndb_mgmd
      detach: yes
      state: started
      networks:
        - name: "{{ docker_network_name }}"
          ipv4_address: 192.168.0.2
      hostname: management1
    register: output
  - debug: var=output.stdout_lines

  - name: start data node 1
    #shell : docker run -d --net=cluster --name=ndb1 --ip=192.168.0.3 mysql/mysql-cluster ndbd
    docker_container:
      name: ndb1
      image: mysql/mysql-cluster
      command: ndbd
      detach: yes
      state: started
      networks:
        - name: "{{ docker_network_name }}"
          ipv4_address: 192.168.0.3
      hostname: ndb1
    register: output
  - debug: var=output.stdout_lines

  - name: start data node 2
    #shell : docker run -d --net=cluster --name=ndb2 --ip=192.168.0.4 mysql/mysql-cluster ndbd
    docker_container:
      name: ndb2
      image: mysql/mysql-cluster
      command: ndbd
      detach: yes
      state: started
      networks:
        - name: "{{ docker_network_name }}"
          ipv4_address: 192.168.0.4
      hostname: ndb2
    register: output
  - debug: var=output.stdout_lines

  - name: start MySQL server node
    #shell : docker run -d --net=cluster --name=mysql1 --ip=192.168.0.10 -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql/mysql-cluster mysqld
    docker_container:
      name: mysql1
      image: mysql/mysql-cluster
      command: mysqld
      detach: yes
      state: started
      networks:
        - name: "{{ docker_network_name }}"
          ipv4_address: 192.168.0.10
      hostname: mysql1
      env:
          MYSQL_RANDOM_ROOT_PASSWORD: true
    register: output
  - debug: var=output.stdout_lines

#  - name: Add a container to a network, leaving existing containers connected
#    docker_network:
#      name: "{{ docker_network_name }}"
#      connected:
#        - management1
#        - ndb1
#        - ndb2
#        - mysql1
#      appends: yes

#  - name: get mysql password
#    shell : sleep 30 ; docker logs mysql1 2>&1 | grep PASSWORD | awk '{print $5}'
#    register: mysql_password
#  - debug: var=mysql_password.stdout

#  - name: change mysql password
#    shell : docker exec -i mysql1 mysql -uroot -p'{{ mysql_password.stdout }}' -e 'ALTER USER 'root'@'mysql1' IDENTIFIED BY '{{ MyNewPass }}''
#    register: output
#  - debug: var=output.stdout_lines


  - name: start a container with an interactive management client
    #shell : docker run -it --net=cluster mysql/mysql-cluster ndb_mgm
    docker_container:
      name: imc
      image: mysql/mysql-cluster
      command: ndb_mgm
      detach: yes
      state: started
      networks:
        - name: "{{ docker_network_name }}"
    register: output
  - debug: var=output.stdout_lines
